/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package april.lcmtypes;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class procman_process_t implements lcm.lcm.LCMEncodable
{
    public int procid;
    public String name;
    public String cmdline;
    public String host;
    public boolean auto_restart;
    public int restart_delay_ms;
    public boolean running;
 
    public procman_process_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xe8e763f721e7f21fL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(april.lcmtypes.procman_process_t.class))
            return 0L;
 
        classes.add(april.lcmtypes.procman_process_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        outs.writeInt(this.procid); 
 
        __strbuf = new char[this.name.length()]; this.name.getChars(0, this.name.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        __strbuf = new char[this.cmdline.length()]; this.cmdline.getChars(0, this.cmdline.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        __strbuf = new char[this.host.length()]; this.host.getChars(0, this.host.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        outs.writeByte( this.auto_restart ? 1 : 0); 
 
        outs.writeInt(this.restart_delay_ms); 
 
        outs.writeByte( this.running ? 1 : 0); 
 
    }
 
    public procman_process_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public procman_process_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static april.lcmtypes.procman_process_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        april.lcmtypes.procman_process_t o = new april.lcmtypes.procman_process_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.procid = ins.readInt();
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.name = new String(__strbuf);
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.cmdline = new String(__strbuf);
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.host = new String(__strbuf);
 
        this.auto_restart = ins.readByte()!=0;
 
        this.restart_delay_ms = ins.readInt();
 
        this.running = ins.readByte()!=0;
 
    }
 
    public april.lcmtypes.procman_process_t copy()
    {
        april.lcmtypes.procman_process_t outobj = new april.lcmtypes.procman_process_t();
        outobj.procid = this.procid;
 
        outobj.name = this.name;
 
        outobj.cmdline = this.cmdline;
 
        outobj.host = this.host;
 
        outobj.auto_restart = this.auto_restart;
 
        outobj.restart_delay_ms = this.restart_delay_ms;
 
        outobj.running = this.running;
 
        return outobj;
    }
 
}

