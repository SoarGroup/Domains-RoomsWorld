package april.vis;

import java.io.*;
import java.util.*;

/**
   USE RESTRICTION:
   This distribution of the Hershey Fonts may be used by anyone for
   any purpose, commercial or otherwise, providing that:
   1. The following acknowledgements must be distributed with
   the font data:
   - The Hershey Fonts were originally created by Dr.
   A. V. Hershey while working at the U. S.
   National Bureau of Standards.
   - The format of the Font data in this distribution
   was originally created by
   James Hurt
   Cognition, Inc.
   900 Technology Park Drive
   Billerica, MA 01821
   (mit-eddie!ci-dandelion!hurt)

**/
public class HersheyFont
{
    ArrayList<byte[]> cdatas = new ArrayList<byte[]>(); // character data

    static HersheyFont defaultHersheyFont;

    /** Create default font (based on rowmans) **/
    public HersheyFont(byte fontData[][])
    {
        for (int i = 0; i < fontData.length; i++)
            cdatas.add(fontData[i]);
    }

    public static HersheyFont getDefaultFont()
    {
        if (defaultHersheyFont == null) {
            defaultHersheyFont = new HersheyFont(defaultFont);
        }

        return defaultHersheyFont;
    }

    /** Load a font from a file. **/
    public HersheyFont(String path) throws IOException
    {
        BufferedReader ins = new BufferedReader(new FileReader(path));

        ArrayList<String> lines = new ArrayList<String>();
        while (true) {
            String s = ins.readLine();
            if (s == null)
                break;
            lines.add(s);
        }

        int pos = 0;

        while (pos < lines.size()) {

            // read the whole first line.
            String s = lines.get(pos++);

            // The file format breaks long lines. Append any lines
            // that appear to be continuations of the current
            // character.
            while (pos < lines.size()) {
                String t = lines.get(pos);
                // If this line looks like a new character, we're done.
                // (XXX This test is prone to false positives.)

                if (looksLikeNewCharacter(t))
                    break;

                // append.
                s = s + t;
                pos ++;
            }

            int idx = Integer.parseInt(s.substring(0,5).trim());
            int nvertices = Integer.parseInt(s.substring(5, 8).trim());

            String vs = s.substring(8);

            byte bs[] = new byte[vs.length()];
            for (int i = 0; i < vs.length(); i++) {
                char c = vs.charAt(i);
                if (c == ' ')
                    bs[i] = 127; // we encode "pen up" with 127 followed by a zero.
                else
                    bs[i] = (byte) (c - 'R');
            }

            cdatas.add(bs);
        }
    }

    /** If you wanted to plot this character centered at particular
     * coordinates, you should subtract the offset from the
     * coordinates you use to draw it.
     **/
    public int getCharacterHorizontalOffset(int idx)
    {
        if (idx >= cdatas.size())
            return 0;

        return -cdatas.get(idx)[0];
    }

    /* This returns how far apart the letters should be drawn,
     * including white space. This is probably not what we want. **/
    public int getCharacterWidth(int idx)
    {
        if (idx >= cdatas.size())
            return 0;

        return cdatas.get(idx)[1]-cdatas.get(idx)[0];
    }

    /** How far above the character's origin does the letter extend?
     * This is not the same as Ascent (which is relative to the
     * logical baseline of the font.)
     **/
    public int getCharacterAbove(int idx)
    {
        if (idx >= cdatas.size())
            return 0;

        byte v[] = cdatas.get(idx);

        int max = -256;
        for (int i = 2; i < v.length; i+=2) {
            if (v[i]==127)
                continue;
            max = Math.max(max, v[i+1]);
        }

        return max;
    }

    /** How far below the character's origin does the letter extend?
     * This is not the same as Descent (which is relative to the
     * logical baseline of the font.)
     **/
    public int getCharacterBelow(int idx)
    {
        if (idx >= cdatas.size())
            return 0;

        byte v[] = cdatas.get(idx);

        int min = 256;
        for (int i = 2; i < v.length; i+=2) {
            if (v[i]==127)
                continue;
            min = Math.min(min, v[i+1]);
        }

        return -min;
    }

    public int getMaxCharacterHeight()
    {
        int max = 0;

        for (int i = 0; i < cdatas.size(); i++) {
            max = Math.max(max, getCharacterAbove(i) + getCharacterBelow(i));
        }

        return max;
    }

    static boolean isDigitOrSpace(char c)
    {
        return ((c>='0' && c<='9') || c==' ');
    }

    static boolean looksLikeNewCharacter(String s)
    {
        if (s.length() < 10)
            return false;

        for (int i = 0; i < 8; i++)
            if (!isDigitOrSpace(s.charAt(i)))
                return false;
        return true;
    }

    public static void main(String args[])
    {
        try {
            mainEx(args);
        } catch (IOException ex) {
        }
    }

    public static void mainEx(String args[]) throws IOException
    {
        HersheyFont hf = new HersheyFont(args[0]);

        System.out.printf(" static byte defaultFont[][] = {\n");

        for (int i = 0; i < hf.cdatas.size(); i++) {
            System.out.printf("{");
            byte v[] = hf.cdatas.get(i);
            for (int j = 0; j < v.length; j++)
                System.out.printf("%d,", v[j]);
            System.out.printf("},\n");
        }
        System.out.printf("}\n");
    }

    // rowmans, converted using this class' main function from the
    // .jhf files here: http://www.batbox.org/font.html
    static byte defaultFont[][] = {
        {-8,8,} ,
        {-5,5,0,-12,0,2,127,0,0,7,-1,8,0,9,1,8,0,7,} ,
        {-8,8,-4,-12,-4,-5,127,0,4,-12,4,-5,} ,
        {-10,11,1,-16,-6,16,127,0,7,-16,0,16,127,0,-6,-3,8,-3,127,0,-7,3,7,3,} ,
        {-10,10,-2,-16,-2,13,127,0,2,-16,2,13,127,0,7,-9,5,-11,2,-12,-2,-12,-5,-11,-7,-9,-7,-7,-6,-5,-5,-4,-3,-3,3,-1,5,0,6,1,7,3,7,6,5,8,2,9,-2,9,-5,8,-7,6,} ,
        {-12,12,9,-12,-9,9,127,0,-4,-12,-2,-10,-2,-8,-3,-6,-5,-5,-7,-5,-9,-7,-9,-9,-8,-11,-6,-12,-4,-12,-2,-11,1,-10,4,-10,7,-11,9,-12,127,0,5,2,3,3,2,5,2,7,4,9,6,9,8,8,9,6,9,4,7,2,5,2,} ,
        {-13,13,10,-3,10,-4,9,-5,8,-5,7,-4,6,-2,4,3,2,6,0,8,-2,9,-6,9,-8,8,-9,7,-10,5,-10,3,-9,1,-8,0,-1,-4,0,-5,1,-7,1,-9,0,-11,-2,-12,-4,-11,-5,-9,-5,-7,-4,-4,-2,-1,3,6,5,8,7,9,9,9,10,8,10,7,} ,
        {-5,5,0,-10,-1,-11,0,-12,1,-11,1,-9,0,-7,-1,-6,} ,
        {-7,7,4,-16,2,-14,0,-11,-2,-7,-3,-2,-3,2,-2,7,0,11,2,14,4,16,} ,
        {-7,7,-4,-16,-2,-14,0,-11,2,-7,3,-2,3,2,2,7,0,11,-2,14,-4,16,} ,
        {-8,8,0,-12,0,0,127,0,-5,-9,5,-3,127,0,5,-9,-5,-3,} ,
        {-13,13,0,-9,0,9,127,0,-9,0,9,0,} ,
        {-5,5,1,8,0,9,-1,8,0,7,1,8,1,10,0,12,-1,13,} ,
        {-13,13,-9,0,9,0,} ,
        {-5,5,0,7,-1,8,0,9,1,8,0,7,} ,
        {-11,11,9,-16,-9,16,} ,
        {-10,10,-1,-12,-4,-11,-6,-8,-7,-3,-7,0,-6,5,-4,8,-1,9,1,9,4,8,6,5,7,0,7,-3,6,-8,4,-11,1,-12,-1,-12,} ,
        {-10,10,-4,-8,-2,-9,1,-12,1,9,} ,
        {-10,10,-6,-7,-6,-8,-5,-10,-4,-11,-2,-12,2,-12,4,-11,5,-10,6,-8,6,-6,5,-4,3,-1,-7,9,7,9,} ,
        {-10,10,-5,-12,6,-12,0,-4,3,-4,5,-3,6,-2,7,1,7,3,6,6,4,8,1,9,-2,9,-5,8,-6,7,-7,5,} ,
        {-10,10,3,-12,-7,2,8,2,127,0,3,-12,3,9,} ,
        {-10,10,5,-12,-5,-12,-6,-3,-5,-4,-2,-5,1,-5,4,-4,6,-2,7,1,7,3,6,6,4,8,1,9,-2,9,-5,8,-6,7,-7,5,} ,
        {-10,10,6,-9,5,-11,2,-12,0,-12,-3,-11,-5,-8,-6,-3,-6,2,-5,6,-3,8,0,9,1,9,4,8,6,6,7,3,7,2,6,-1,4,-3,1,-4,0,-4,-3,-3,-5,-1,-6,2,} ,
        {-10,10,7,-12,-3,9,127,0,-7,-12,7,-12,} ,
        {-10,10,-2,-12,-5,-11,-6,-9,-6,-7,-5,-5,-3,-4,1,-3,4,-2,6,0,7,2,7,5,6,7,5,8,2,9,-2,9,-5,8,-6,7,-7,5,-7,2,-6,0,-4,-2,-1,-3,3,-4,5,-5,6,-7,6,-9,5,-11,2,-12,-2,-12,} ,
        {-10,10,6,-5,5,-2,3,0,0,1,-1,1,-4,0,-6,-2,-7,-5,-7,-6,-6,-9,-4,-11,-1,-12,0,-12,3,-11,5,-9,6,-5,6,0,5,5,3,8,0,9,-2,9,-5,8,-6,6,} ,
        {-5,5,0,-5,-1,-4,0,-3,1,-4,0,-5,127,0,0,7,-1,8,0,9,1,8,0,7,} ,
        {-5,5,0,-5,-1,-4,0,-3,1,-4,0,-5,127,0,1,8,0,9,-1,8,0,7,1,8,1,10,0,12,-1,13,} ,
        {-12,12,8,-9,-8,0,8,9,} ,
        {-13,13,-9,-3,9,-3,127,0,-9,3,9,3,} ,
        {-12,12,-8,-9,8,0,-8,9,} ,
        {-9,9,-6,-7,-6,-8,-5,-10,-4,-11,-2,-12,2,-12,4,-11,5,-10,6,-8,6,-6,5,-4,4,-3,0,-1,0,2,127,0,0,7,-1,8,0,9,1,8,0,7,} ,
        {-13,14,5,-4,4,-6,2,-7,-1,-7,-3,-6,-4,-5,-5,-2,-5,1,-4,3,-2,4,1,4,3,3,4,1,127,0,-1,-7,-3,-5,-4,-2,-4,1,-3,3,-2,4,127,0,5,-7,4,1,4,3,6,4,8,4,10,2,11,-1,11,-3,10,-6,9,-8,7,-10,5,-11,2,-12,-1,-12,-4,-11,-6,-10,-8,-8,-9,-6,-10,-3,-10,0,-9,3,-8,5,-6,7,-4,8,-1,9,2,9,5,8,7,7,8,6,127,0,6,-7,5,1,5,3,6,4,} ,
        {-9,9,0,-12,-8,9,127,0,0,-12,8,9,127,0,-5,2,5,2,} ,
        {-11,10,-7,-12,-7,9,127,0,-7,-12,2,-12,5,-11,6,-10,7,-8,7,-6,6,-4,5,-3,2,-2,127,0,-7,-2,2,-2,5,-1,6,0,7,2,7,5,6,7,5,8,2,9,-7,9,} ,
        {-10,11,8,-7,7,-9,5,-11,3,-12,-1,-12,-3,-11,-5,-9,-6,-7,-7,-4,-7,1,-6,4,-5,6,-3,8,-1,9,3,9,5,8,7,6,8,4,} ,
        {-11,10,-7,-12,-7,9,127,0,-7,-12,0,-12,3,-11,5,-9,6,-7,7,-4,7,1,6,4,5,6,3,8,0,9,-7,9,} ,
        {-10,9,-6,-12,-6,9,127,0,-6,-12,7,-12,127,0,-6,-2,2,-2,127,0,-6,9,7,9,} ,
        {-10,8,-6,-12,-6,9,127,0,-6,-12,7,-12,127,0,-6,-2,2,-2,} ,
        {-10,11,8,-7,7,-9,5,-11,3,-12,-1,-12,-3,-11,-5,-9,-6,-7,-7,-4,-7,1,-6,4,-5,6,-3,8,-1,9,3,9,5,8,7,6,8,4,8,1,127,0,3,1,8,1,} ,
        {-11,11,-7,-12,-7,9,127,0,7,-12,7,9,127,0,-7,-2,7,-2,} ,
        {-4,4,0,-12,0,9,} ,
        {-8,8,4,-12,4,4,3,7,2,8,0,9,-2,9,-4,8,-5,7,-6,4,-6,2,} ,
        {-11,10,-7,-12,-7,9,127,0,7,-12,-7,2,127,0,-2,-3,7,9,} ,
        {-10,7,-6,-12,-6,9,127,0,-6,9,6,9,} ,
        {-12,12,-8,-12,-8,9,127,0,-8,-12,0,9,127,0,8,-12,0,9,127,0,8,-12,8,9,} ,
        {-11,11,-7,-12,-7,9,127,0,-7,-12,7,9,127,0,7,-12,7,9,} ,
        {-11,11,-2,-12,-4,-11,-6,-9,-7,-7,-8,-4,-8,1,-7,4,-6,6,-4,8,-2,9,2,9,4,8,6,6,7,4,8,1,8,-4,7,-7,6,-9,4,-11,2,-12,-2,-12,} ,
        {-11,10,-7,-12,-7,9,127,0,-7,-12,2,-12,5,-11,6,-10,7,-8,7,-5,6,-3,5,-2,2,-1,-7,-1,} ,
        {-11,11,-2,-12,-4,-11,-6,-9,-7,-7,-8,-4,-8,1,-7,4,-6,6,-4,8,-2,9,2,9,4,8,6,6,7,4,8,1,8,-4,7,-7,6,-9,4,-11,2,-12,-2,-12,127,0,1,5,7,11,} ,
        {-11,10,-7,-12,-7,9,127,0,-7,-12,2,-12,5,-11,6,-10,7,-8,7,-6,6,-4,5,-3,2,-2,-7,-2,127,0,0,-2,7,9,} ,
        {-10,10,7,-9,5,-11,2,-12,-2,-12,-5,-11,-7,-9,-7,-7,-6,-5,-5,-4,-3,-3,3,-1,5,0,6,1,7,3,7,6,5,8,2,9,-2,9,-5,8,-7,6,} ,
        {-8,8,0,-12,0,9,127,0,-7,-12,7,-12,} ,
        {-11,11,-7,-12,-7,3,-6,6,-4,8,-1,9,1,9,4,8,6,6,7,3,7,-12,} ,
        {-9,9,-8,-12,0,9,127,0,8,-12,0,9,} ,
        {-12,12,-10,-12,-5,9,127,0,0,-12,-5,9,127,0,0,-12,5,9,127,0,10,-12,5,9,} ,
        {-10,10,-7,-12,7,9,127,0,7,-12,-7,9,} ,
        {-9,9,-8,-12,0,-2,0,9,127,0,8,-12,0,-2,} ,
        {-10,10,7,-12,-7,9,127,0,-7,-12,7,-12,127,0,-7,9,7,9,} ,
        {-7,7,-3,-16,-3,16,127,0,-2,-16,-2,16,127,0,-3,-16,4,-16,127,0,-3,16,4,16,} ,
        {-7,7,-7,-12,7,12,} ,
        {-7,7,2,-16,2,16,127,0,3,-16,3,16,127,0,-4,-16,3,-16,127,0,-4,16,3,16,} ,
        {-8,8,-2,-6,0,-9,2,-6,127,0,-5,-3,0,-8,5,-3,127,0,0,-8,0,9,} ,
        {-8,8,-8,11,8,11,} ,
        {-5,5,1,-12,0,-11,-1,-9,-1,-7,0,-6,1,-7,0,-8,} ,
        {-9,10,6,-5,6,9,127,0,6,-2,4,-4,2,-5,-1,-5,-3,-4,-5,-2,-6,1,-6,3,-5,6,-3,8,-1,9,2,9,4,8,6,6,} ,
        {-10,9,-6,-12,-6,9,127,0,-6,-2,-4,-4,-2,-5,1,-5,3,-4,5,-2,6,1,6,3,5,6,3,8,1,9,-2,9,-4,8,-6,6,} ,
        {-9,9,6,-2,4,-4,2,-5,-1,-5,-3,-4,-5,-2,-6,1,-6,3,-5,6,-3,8,-1,9,2,9,4,8,6,6,} ,
        {-9,10,6,-12,6,9,127,0,6,-2,4,-4,2,-5,-1,-5,-3,-4,-5,-2,-6,1,-6,3,-5,6,-3,8,-1,9,2,9,4,8,6,6,} ,
        {-9,9,-6,1,6,1,6,-1,5,-3,4,-4,2,-5,-1,-5,-3,-4,-5,-2,-6,1,-6,3,-5,6,-3,8,-1,9,2,9,4,8,6,6,} ,
        {-5,7,5,-12,3,-12,1,-11,0,-8,0,9,127,0,-3,-5,4,-5,} ,
        {-9,10,6,-5,6,11,5,14,4,15,2,16,-1,16,-3,15,127,0,6,-2,4,-4,2,-5,-1,-5,-3,-4,-5,-2,-6,1,-6,3,-5,6,-3,8,-1,9,2,9,4,8,6,6,} ,
        {-9,10,-5,-12,-5,9,127,0,-5,-1,-2,-4,0,-5,3,-5,5,-4,6,-1,6,9,} ,
        {-4,4,-1,-12,0,-11,1,-12,0,-13,-1,-12,127,0,0,-5,0,9,} ,
        {-5,5,0,-12,1,-11,2,-12,1,-13,0,-12,127,0,1,-5,1,12,0,15,-2,16,-4,16,} ,
        {-9,8,-5,-12,-5,9,127,0,5,-5,-5,5,127,0,-1,1,6,9,} ,
        {-4,4,0,-12,0,9,} ,
        {-15,15,-11,-5,-11,9,127,0,-11,-1,-8,-4,-6,-5,-3,-5,-1,-4,0,-1,0,9,127,0,0,-1,3,-4,5,-5,8,-5,10,-4,11,-1,11,9,} ,
        {-9,10,-5,-5,-5,9,127,0,-5,-1,-2,-4,0,-5,3,-5,5,-4,6,-1,6,9,} ,
        {-9,10,-1,-5,-3,-4,-5,-2,-6,1,-6,3,-5,6,-3,8,-1,9,2,9,4,8,6,6,7,3,7,1,6,-2,4,-4,2,-5,-1,-5,} ,
        {-10,9,-6,-5,-6,16,127,0,-6,-2,-4,-4,-2,-5,1,-5,3,-4,5,-2,6,1,6,3,5,6,3,8,1,9,-2,9,-4,8,-6,6,} ,
        {-9,10,6,-5,6,16,127,0,6,-2,4,-4,2,-5,-1,-5,-3,-4,-5,-2,-6,1,-6,3,-5,6,-3,8,-1,9,2,9,4,8,6,6,} ,
        {-7,6,-3,-5,-3,9,127,0,-3,1,-2,-2,0,-4,2,-5,5,-5,} ,
        {-8,9,6,-2,5,-4,2,-5,-1,-5,-4,-4,-5,-2,-4,0,-2,1,3,2,5,3,6,5,6,6,5,8,2,9,-1,9,-4,8,-5,6,} ,
        {-5,7,0,-12,0,5,1,8,3,9,5,9,127,0,-3,-5,4,-5,} ,
        {-9,10,-5,-5,-5,5,-4,8,-2,9,1,9,3,8,6,5,127,0,6,-5,6,9,} ,
        {-8,8,-6,-5,0,9,127,0,6,-5,0,9,} ,
        {-11,11,-8,-5,-4,9,127,0,0,-5,-4,9,127,0,0,-5,4,9,127,0,8,-5,4,9,} ,
        {-8,9,-5,-5,6,9,127,0,6,-5,-5,9,} ,
        {-8,8,-6,-5,0,9,127,0,6,-5,0,9,-2,13,-4,15,-6,16,-7,16,} ,
        {-8,9,6,-5,-5,9,127,0,-5,-5,6,-5,127,0,-5,9,6,9,} ,
        {-7,7,2,-16,0,-15,-1,-14,-2,-12,-2,-10,-1,-8,0,-7,1,-5,1,-3,-1,-1,127,0,0,-15,-1,-13,-1,-11,0,-9,1,-8,2,-6,2,-4,1,-2,-3,0,1,2,2,4,2,6,1,8,0,9,-1,11,-1,13,0,15,127,0,-1,1,1,3,1,5,0,7,-1,8,-2,10,-2,12,-1,14,0,15,2,16,} ,
        {-4,4,0,-16,0,16,} ,
        {-7,7,-2,-16,0,-15,1,-14,2,-12,2,-10,1,-8,0,-7,-1,-5,-1,-3,1,-1,127,0,0,-15,1,-13,1,-11,0,-9,-1,-8,-2,-6,-2,-4,-1,-2,3,0,-1,2,-2,4,-2,6,-1,8,0,9,1,11,1,13,0,15,127,0,1,1,-1,3,-1,5,0,7,1,8,2,10,2,12,1,14,0,15,-2,16,} ,
        {-12,12,-9,3,-9,1,-8,-2,-6,-3,-4,-3,-2,-2,2,1,4,2,6,2,8,1,9,-1,127,0,-9,1,-8,-1,-6,-2,-4,-2,-2,-1,2,2,4,3,6,3,8,2,9,-1,9,-3,} ,
        {-7,7,-1,-12,-3,-11,-4,-9,-4,-7,-3,-5,-1,-4,1,-4,3,-5,4,-7,4,-9,3,-11,1,-12,-1,-12,} ,
    };
}
